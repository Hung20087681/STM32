
/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "usb_host.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <math.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "stm32f4xx_hal.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
typedef enum {
    STATE_IDLE,
    STATE_HOME,
    STATE_MOVE_TO



} RobotState;
RobotState current_state = STATE_IDLE;
typedef struct {
    float target_angle;
    int current_steps;
    int total_steps;
    bool target_reached;
    int direction; // 1 = forward, 0 = reverse
    float current_angle; // Lưu góc hiện tại của động cơ
} Motor;

typedef struct {
    float x;
    float y;
    float z;
} Position;


// Khai báo kiểu dữ liệu struct Point chuẩn
typedef struct {
    float x;
    float y;
    uint8_t color;
} Point;



/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define MAX_RPM 500
#define MIN_RPM 30
#define HOME_RPM 50
#define CLOCK_FREQ 84000000
#define MICROSTEPPING 64
#define STEP_ANGLE 1.8
#define GEARBOX 10

//  ?ịnh nghĩa chân DIR cho từng động cơ
#define MOTOR1_DIR_PIN GPIO_PIN_10
#define MOTOR2_DIR_PIN GPIO_PIN_12
#define MOTOR3_DIR_PIN GPIO_PIN_14

#define MOTOR1_DIR_PORT GPIOE
#define MOTOR2_DIR_PORT GPIOE
#define MOTOR3_DIR_PORT GPIOE

#define HOME_SENSOR1_PIN GPIO_PIN_8
#define HOME_SENSOR2_PIN GPIO_PIN_9
#define HOME_SENSOR3_PIN GPIO_PIN_10

#define HOME_SENSOR1_PORT GPIOD
#define HOME_SENSOR2_PORT GPIOD
#define HOME_SENSOR3_PORT GPIOD

#define BUM_PIN GPIO_PIN_0
#define BUM_PORT GPIOD

#define START_BUTTON_DIR_PIN GPIO_PIN_4
#define HOME_BUTTON_DIR_PIN GPIO_PIN_5
#define STOP_BUTTON_DIR_PIN GPIO_PIN_6


#define START_BUTTON_DIR_PORT GPIOE
#define HOME_BUTTON_DIR_PORT GPIOE
#define STOP_BUTTON_DIR_PORT GPIOE

#define DMA_BUFFER_SIZE 256
#define MAX_BUFFER_SIZE 512 // Kích thước tối đa của buffer
char processing_buffer[MAX_BUFFER_SIZE]; // Lưu trữ dữ liệu đầy đủ để xử lý
size_t buffer_index = 0;                 // Vị trí hiện tại trong buffer
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

I2S_HandleTypeDef hi2s3;

SPI_HandleTypeDef hspi1;

TIM_HandleTypeDef htim1;

UART_HandleTypeDef huart2;
DMA_HandleTypeDef hdma_usart2_rx;

/* USER CODE BEGIN PV */
const float e = 138.56;     // end effector
 const float f = 346.41;     // base
 const float re = 370.0;
 const float rf =220.0;

 // trigonometric constants
 const float sqrt3 = sqrt(3.0);
 const float pi = 3.141592653;    // PI
 const float sin120 = sqrt3/2.0;
 const float cos120 = -0.5;
 const float tan60 = sqrt3;
 const float sin30 = 0.5;
 const float tan30 = 1/sqrt3;

Motor motor1 = {0, 0, 0, false, 0, 0};
Motor motor2 = {0, 0, 0, false, 0, 0};
Motor motor3 = {0, 0, 0, false, 0, 0};

int move_color=0,move_x=0,move_y=0;
float ratio1 = 1.0, ratio2 = 1.0, ratio3 = 1.0;
 int max_steps = 0,max_current=0;
 float syn_speed=MIN_RPM;

bool HOME_CHECK = false;
bool BUMP_CHECK = false;
bool OBJECT_CHECK = false;

Position current_position ;

uint8_t dma_rx_buffer[DMA_BUFFER_SIZE]; // Buffer DMA
volatile int current_color = 0;                  // Màu (dạng số nguyên)
volatile int current_x = 0, current_y = 0;       // T ?a độ X, Y (có thể âm hoặc dương)
volatile uint16_t dma_last_pos = 0;
float next_x,next_y;


/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_I2C1_Init(void);
static void MX_I2S3_Init(void);
static void MX_SPI1_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM1_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */

int calculate_steps(float angle);
float sigmoid_acceleration(float progress);
void update_speed();
void step_motor(Motor *motor, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_TypeDef *DIR_PORT, uint16_t DIR_PIN);
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);
void init_motors();
void start_timers();
bool all_motors_reached_target();
int delta_calcAngleYZ(float x0, float y0, float z0, float *theta);
int delta_calcInverse(float x0, float y0, float z0, float *theta1, float *theta2, float *theta3);
int delta_calcForward(float theta1, float theta2, float theta3, float *x0, float *y0, float *z0);
void move_to(float x_target, float y_target, float z_target);
void move_to_home();
void turn_on_pump() ;
void turn_off_pump();
void process_uart_data(uint8_t *data, uint16_t length);
void update_coordinates(int color, int x, int y);
void move_with_parabolic_curve(float x0, float y0, float z0,
                               float x1, float y1, float z1,
                               float h, uint32_t duration_ms);

void update_position();
void handle_idle_state();
void handle_move_to_state();
void handle_home_state();
void process_dma_uart();
void stop_all_timers();
uint8_t delay_non_blocking(uint32_t delay_time_ms);
void update_max_current();
void check_object_from_webcam();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void check_object_from_webcam(){
	if (abs(current_x- move_x) < 2 &&
	        abs(current_y - move_y) < 2 &&
			current_color == move_color){
	       OBJECT_CHECK=false;
	    }else {	   OBJECT_CHECK=true; }
}
void update_max_current(){
	if(max_steps==motor1.total_steps){
		max_current=motor1.current_steps;
	}
	if(max_steps==motor2.total_steps){
			max_current=motor2.current_steps;
	}
	if(max_steps==motor3.total_steps){
			max_current=motor3.current_steps;
	}
}
// Hàm delay không chặn
uint8_t delay_non_blocking(uint32_t delay_time_ms) {
    static uint32_t start_time = 0;
    static uint8_t is_running = 0;

    // Bắt đầu trễ
    if (!is_running) {
        start_time = HAL_GetTick(); // Lấy th ?i gian hiện tại
        is_running = 1;             //  ?ánh dấu đang chạy
        return 0;                   // Chưa hết th ?i gian trễ
    }

    // Kiểm tra th ?i gian trễ
    if ((HAL_GetTick() - start_time) >= delay_time_ms) {
        is_running = 0;             // Kết thúc trễ
        return 1;                   // Th ?i gian trễ hoàn thành
    }

    return 0;                       // Chưa hết th ?i gian trễ
}

void stop_all_timers() {
    HAL_TIM_Base_Stop_IT(&htim1);
}

void process_dma_uart() {
    uint16_t pos = DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(huart2.hdmarx);
    if (pos != dma_last_pos) {
        uint16_t length = (pos > dma_last_pos) ? (pos - dma_last_pos) : (DMA_BUFFER_SIZE - dma_last_pos);
        process_uart_data(&dma_rx_buffer[dma_last_pos], length);
        dma_last_pos = pos;
    }
}

void handle_idle_state() {
    // Ch ? lệnh di chuyển hoặc homing

		if (HAL_GPIO_ReadPin(START_BUTTON_DIR_PORT, START_BUTTON_DIR_PIN) == 0 && HOME_CHECK==true) {
    	delay_non_blocking(20);
        current_state = STATE_MOVE_TO;
    }  else if ( HAL_GPIO_ReadPin(HOME_BUTTON_DIR_PORT, HOME_BUTTON_DIR_PIN) == 0 && HOME_CHECK==false) {
    	delay_non_blocking(20);
        current_state = STATE_HOME;
    }

}
void handle_move_to_state() {
	check_object_from_webcam();
	update_position();


	    switch(current_color){
	    case 1:
	    								next_x = 90;
	                                      next_y = -90;
	                                      break;
	    case 3:
	                                      next_x = 0;
	                                      next_y = -115;
	                                      break;
	    case 2:
	                                      next_x = -80;
	                                      next_y = -90;
	                                      break;
	    }
	    move_with_parabolic_curve(current_x, current_y+10, -292, next_x, next_y, -240,40,20);
	    turn_off_pump();
	    move_to(0, 0, -230);
	        // Kiểm tra nếu hoàn thành
	        if (OBJECT_CHECK==false || HAL_GPIO_ReadPin(STOP_BUTTON_DIR_PORT, STOP_BUTTON_DIR_PIN)== 0) {
	            current_state = STATE_IDLE;
	        }else if(OBJECT_CHECK==true){
	        	current_state = STATE_MOVE_TO;
	        }
	    }




void handle_home_state() {
    // Thực hiện homing
	move_to_home();
    // Kiểm tra nếu hoàn thành homing
    if (HOME_CHECK==true) {
        current_state = STATE_IDLE;
    }
}
void update_position(){
	move_color=current_color;
	move_x=current_x;
	move_y=current_y;

}

void move_with_parabolic_curve(float x0, float y0, float z0,
                               float x1, float y1, float z1,
                               float h, uint32_t duration_ms) {
    const uint16_t steps = 2; // Số bước chia nh ?
    const float step_time_ms = (float)duration_ms / steps; // Th ?i gian mỗi bước

    float dx = (x1 - x0) / steps; // Bước nhảy trục X
    float dy = (y1 - y0) / steps; // Bước nhảy trục Y
    float t = 0.0; // Hệ số nội suy

    float x_current = x0;
    float y_current= y0;
    float z_current = z0;

    for (uint16_t i = 0; i <= steps; i++) {
        t = (float)i / steps; // Hệ số nội suy từ 0 đến 1

        // Tính t ?a độ Z theo đư ?ng cong parabol
        z_current = z0 + (z1 - z0) * t + (4 * h * t * (1 - t));

        // Cập nhật t ?a độ X và Y tuyến tính
        x_current = x0 + dx * i;
        y_current = y0 + dy * i;

        // Gửi lệnh di chuyển
        move_to(x_current, y_current, z_current);
        turn_on_pump();


    }

    //  ?ảm bảo robot đến chính xác điểm cuối
    move_to(x1, y1, z1);
}

void update_coordinates(int color, int x, int y) {
    // Sao chép giá trị vào biến toàn cục
    current_color = color;
    current_x = x;
    current_y = y;
    // Debug hoặc kiểm tra kết quả
}

void process_uart_data(uint8_t *data, uint16_t length) {
    // Kiểm tra tràn bộ nhớ
    if (buffer_index + length >= MAX_BUFFER_SIZE) {
        // Xử lý lỗi: xóa buffer để tránh tràn
        buffer_index = 0;
    }

    // Sao chép dữ liệu mới nhận vào buffer tạm th ?i
    memcpy(&processing_buffer[buffer_index], data, length);
    buffer_index += length;

    //  ?ảm bảo chuỗi trong buffer luôn kết thúc bằng NULL
    processing_buffer[buffer_index] = '\0';

    // Tách các dòng hoàn chỉnh bằng '\n'
    char *line_start = processing_buffer;
    char *line_end = strchr(line_start, '\n');

    while (line_end != NULL) {
        *line_end = '\0'; // Thay '\n' bằng NULL để tạo thành chuỗi hoàn chỉnh

        // Phân tích chuỗi "color,x,y"
        int color, x, y;
        if (sscanf(line_start, "%d,%d,%d", &color, &x, &y) == 3) {
            update_coordinates(color, x, y); // G ?i hàm xử lý t ?a độ
        }

        // Di chuyển đến dòng tiếp theo
        line_start = line_end + 1;
        line_end = strchr(line_start, '\n');
    }

    // Lưu phần còn lại (chuỗi chưa hoàn chỉnh) vào đầu buffer
    size_t remaining_length = strlen(line_start);
    memmove(processing_buffer, line_start, remaining_length);
    buffer_index = remaining_length;

    //  ?ảm bảo buffer kết thúc bằng NULL
    processing_buffer[buffer_index] = '\0';
}
// Bật bơm
void turn_on_pump() {
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);  // Bật chân PD0
    BUMP_CHECK=true;


}

// Tắt bơm
void turn_off_pump() {
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);  // Tắt chân PD0
    BUMP_CHECK=false;

}
//Hàm ve home
void move_to_home() {
    // Set home speed and reset target_reached flags
    HOME_CHECK = false;
    syn_speed= HOME_RPM;


    motor1.target_reached = false;
    motor2.target_reached = false;
    motor3.target_reached = false;

    motor1.direction=0;
    motor2.direction=0;
    motor3.direction=0;
    // Start timers for motors
    start_timers();

    // Loop until all sensors are triggered
    while (HAL_GPIO_ReadPin(HOME_SENSOR1_PORT, HOME_SENSOR1_PIN) == GPIO_PIN_SET ||
             HAL_GPIO_ReadPin(HOME_SENSOR2_PORT, HOME_SENSOR2_PIN) == GPIO_PIN_SET ||
             HAL_GPIO_ReadPin(HOME_SENSOR3_PORT, HOME_SENSOR3_PIN) == GPIO_PIN_SET) {

        // Check if motors have reached home by updating each motor's direction as needed
        if (HAL_GPIO_ReadPin(HOME_SENSOR1_PORT, HOME_SENSOR1_PIN) == GPIO_PIN_RESET) {
            motor1.target_reached = true;
        } if (HAL_GPIO_ReadPin(HOME_SENSOR2_PORT, HOME_SENSOR2_PIN) == GPIO_PIN_RESET) {
            motor2.target_reached = true;
        } if (HAL_GPIO_ReadPin(HOME_SENSOR3_PORT, HOME_SENSOR3_PIN) == GPIO_PIN_RESET) {
            motor3.target_reached = true;
        }
    }

    // Stop all timers after reaching home
    stop_all_timers();

       motor1.current_steps = 0;
       motor2.current_steps = 0;
       motor3.current_steps = 0;

       motor1.current_angle = -36.167205414;
       motor2.current_angle =-36.167205414;
       motor3.current_angle =-36.167205414;

       HOME_CHECK = true;
       move_to(0, 0, -241);
       delay_non_blocking(50);
}
// Hàm tính bước
int calculate_steps(float angle) {
    return 2*abs(round((angle* 200* MICROSTEPPING* GEARBOX) / 360));
}

// Hàm tăng tốc mượt mà
float sigmoid_acceleration(float progress) {
    float k =0.001f;       //  ?ộ dốc của đư ?ng cong sigmoid
    float x_center = 0.5f; // Giá trị giữa khoảng (0.0 đến 1.0)
    return 1.0f / (1.0f + expf(-k * (progress - x_center)));
}

// Cập nhật tốc độ
void update_speed() {
    float progress = (float)max_current / max_steps; // Tính tiến độ
    progress = (progress > 1.0f) ? 1.0f : progress;  // Giới hạn từ 0 đến 1

    float sig_value = sigmoid_acceleration(progress);
    syn_speed = MIN_RPM + (MAX_RPM - MIN_RPM) * sig_value;


}

// Hàm đi ?u khiển bước của động cơ và đổi chi ?u
void step_motor(Motor *motor, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_TypeDef *DIR_PORT, uint16_t DIR_PIN) {
    int angle_difference = motor->target_angle;
    if(HOME_CHECK==true){
    HAL_GPIO_WritePin(DIR_PORT, DIR_PIN, (angle_difference >= 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
    motor->direction = (angle_difference >= 0) ? 1 : 0;
    }else{
    	HAL_GPIO_WritePin(DIR_PORT, DIR_PIN, GPIO_PIN_SET);
    	motor->direction = 0;}
    // Chạy động cơ và cập nhật số bước
       if (motor->current_steps < motor->total_steps) {
           motor->current_steps++;
           update_speed();
           HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);
       } else if (HOME_CHECK == false) {
           HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);
       } else {
           if (HOME_CHECK == true)
               motor->target_reached = true;
       }


}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {

    // Kiểm tra xem động cơ có đạt đến mục tiêu chưa
    process_dma_uart();
	update_max_current();

    if (htim->Instance == TIM1 && !all_motors_reached_target()) {

        if ((int)max_current % (int)ratio1 == 0 && !motor1.target_reached) {
            step_motor(&motor1, GPIOE, GPIO_PIN_9, MOTOR1_DIR_PORT, MOTOR1_DIR_PIN);
        }
         if ((int)max_current % (int)ratio2 == 0 && !motor2.target_reached) {
                   step_motor(&motor2, GPIOE, GPIO_PIN_11, MOTOR2_DIR_PORT, MOTOR2_DIR_PIN);
               }

         if ((int)max_current % (int)ratio3 == 0 && !motor3.target_reached) {
                           step_motor(&motor3, GPIOE, GPIO_PIN_13, MOTOR3_DIR_PORT, MOTOR3_DIR_PIN);

                   }
        	__HAL_TIM_SET_AUTORELOAD(htim, CLOCK_FREQ / (syn_speed  * MICROSTEPPING));


    }
}



// Hàm khởi tạo các thông số động cơ
void init_motors() {
    motor1.total_steps = calculate_steps(motor1.target_angle);
    motor2.total_steps = calculate_steps(motor2.target_angle);
    motor3.total_steps = calculate_steps(motor3.target_angle);

    max_steps = motor1.total_steps;
    if (motor2.total_steps > max_steps) max_steps = motor2.total_steps;
    if (motor3.total_steps > max_steps) max_steps = motor3.total_steps;

    // Tính tỷ lệ bước
    ratio1 = (float)(max_steps / motor1.total_steps);
    ratio2 = (float)(max_steps / motor2.total_steps);
    ratio3 = (float)(max_steps / motor3.total_steps);

    motor1.current_steps = 0;
    motor2.current_steps = 0;
    motor3.current_steps = 0;

    motor1.target_reached = false;
    motor2.target_reached = false;
    motor3.target_reached = false;
}

void start_timers() {
    HAL_TIM_Base_Start_IT(&htim1);

}

bool all_motors_reached_target() {
    return motor1.target_reached && motor2.target_reached && motor3.target_reached;
}

void move_to(float x_target, float y_target, float z_target) {

    const float epsilon = 0.01;

    if (fabs(current_position.x - x_target) < epsilon &&
        fabs(current_position.y - y_target) < epsilon &&
        fabs(current_position.z - z_target) < epsilon) {
        return;
    }

    float theta1, theta2, theta3;
    int status = delta_calcInverse(x_target, y_target, z_target, &theta1, &theta2, &theta3);
    if (status != 0) {
        return;
    }

    // Tính góc chênh lệch cho từng động cơ
    motor1.target_angle = (theta1 - motor1.current_angle);
    motor2.target_angle = (theta2 - motor2.current_angle);
    motor3.target_angle = (theta3 - motor3.current_angle);

    init_motors();
    start_timers();
    while (!all_motors_reached_target());
   stop_all_timers();

    // Cập nhật lại góc hiện tại sau khi di chuyển xong
    motor1.current_angle += motor1.target_angle;
    motor2.current_angle += motor2.target_angle;
    motor3.current_angle += motor3.target_angle;
    // Cập nhật lại tốc độ
    syn_speed=MIN_RPM;

    // Cập nhật vị trí hiện tại của robot
    current_position.x = x_target;
    current_position.y = y_target;
    current_position.z = z_target;
    //printf("Moved to target position: (%.2f, %.2f, %.2f)\n", x_target, y_target, z_target);
}

// Hàm động h ?c nghịch cho robot delta
int delta_calcForward(float theta1, float theta2, float theta3, float *x0, float *y0, float *z0) {
     float t = (f-e)*tan30/2;
     float dtr = pi/(float)180.0;

     theta1 *= dtr;
     theta2 *= dtr;
     theta3 *= dtr;

     float y1 = -(t + rf*cos(theta1));
     float z1 = -rf*sin(theta1);

     float y2 = (t + rf*cos(theta2))*sin30;
     float x2 = y2*tan60;
     float z2 = -rf*sin(theta2);

     float y3 = (t + rf*cos(theta3))*sin30;
     float x3 = -y3*tan60;
     float z3 = -rf*sin(theta3);

     float dnm = (y2-y1)*x3-(y3-y1)*x2;

     float w1 = y1*y1 + z1*z1;
     float w2 = x2*x2 + y2*y2 + z2*z2;
     float w3 = x3*x3 + y3*y3 + z3*z3;

     // x = (a1*z + b1)/dnm
     float a1 = (z2-z1)*(y3-y1)-(z3-z1)*(y2-y1);
     float b1 = -((w2-w1)*(y3-y1)-(w3-w1)*(y2-y1))/2.0;

     // y = (a2*z + b2)/dnm;
     float a2 = -(z2-z1)*x3+(z3-z1)*x2;
     float b2 = ((w2-w1)*x3 - (w3-w1)*x2)/2.0;

     // a*z^2 + b*z + c = 0
     float a = a1*a1 + a2*a2 + dnm*dnm;
     float b = 2*(a1*b1 + a2*(b2-y1*dnm) - z1*dnm*dnm);
     float c = (b2-y1*dnm)*(b2-y1*dnm) + b1*b1 + dnm*dnm*(z1*z1 - re*re);

     // discriminant
     float d = b*b - (float)4.0*a*c;
     if (d < 0) return -1; // non-existing point

     *z0 = -(float)0.5*(b+sqrt(d))/a;
     *x0 = (a1*(*z0 )+ b1)/dnm;
     *y0 = (a2*(*z0) + b2)/dnm;
     return 0;
 }

 // inverse kinematics
 // helper functions, calculates angle theta1 (for YZ-pane)
 int delta_calcAngleYZ(float x0, float y0, float z0, float *theta) {
     float y1 = -0.5 * 0.57735 * f; // f/2 * tg 30
     y0 -= 0.5 * 0.57735    * e;    // shift center to edge
     // z = a + b*y
     float a = (x0*x0 + y0*y0 + z0*z0 +rf*rf - re*re - y1*y1)/(2*z0);
     float b = (y1-y0)/z0;
     // discriminant
     float d = -(a+b*y1)*(a+b*y1)+rf*(b*b*rf+rf);
     if (d < 0) return -1; // non-existing point
     float yj = (y1 - a*b - sqrt(d))/(b*b + 1); // choosing outer point
     float zj = a + b*yj;
    * theta = 180.0*atan(-zj/(y1 - yj))/pi + ((yj>y1)?180.0:0.0);
     return 0;
 }

 // inverse kinematics: (x0, y0, z0) -> (theta1, theta2, theta3)
 // returned status: 0=OK, -1=non-existing position
 int delta_calcInverse(float x0, float y0, float z0, float *theta1, float *theta2, float *theta3) {
     *theta1 = *theta2 = *theta3 = 0;
     int status = delta_calcAngleYZ(x0, y0, z0, theta1);
     if (status == 0) status = delta_calcAngleYZ(x0*cos120 + y0*sin120, y0*cos120-x0*sin120, z0, theta2);  // rotate coords to +120 deg
     if (status == 0) status = delta_calcAngleYZ(x0*cos120 - y0*sin120, y0*cos120+x0*sin120, z0, theta3);  // rotate coords to -120 deg
     return status;
 }



/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_I2C1_Init();
  MX_I2S3_Init();
  MX_SPI1_Init();
  MX_USB_HOST_Init();
  MX_USART2_UART_Init();
  MX_TIM1_Init();
  /* USER CODE BEGIN 2 */
//move_to_home();
HAL_UART_Receive_DMA(&huart2, dma_rx_buffer, DMA_BUFFER_SIZE);
//move_to(50, 100, -292);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();

    /* USER CODE BEGIN 3 */
    process_dma_uart();

   switch (current_state) {
          case STATE_IDLE:
              handle_idle_state();
              break;
          case STATE_HOME:
              handle_home_state();
              break;
          case STATE_MOVE_TO:
              handle_move_to_state();
              break;


      }

  }


  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{

  /* USER CODE BEGIN I2S3_Init 0 */

  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */
  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 0;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 600000;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 1);
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|PUL_1_Pin|DIR_1_Pin|PUL_2_Pin
                          |DIR_2_Pin|PUL_3_Pin|DIR_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Bump_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin DIR_1_Pin DIR_2_Pin DIR_3_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|DIR_1_Pin|DIR_2_Pin|DIR_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pins : START_BUTTON_Pin HOME_BUTTON_Pin STOP_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin|HOME_BUTTON_Pin|STOP_BUTTON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PUL_1_Pin PUL_2_Pin PUL_3_Pin */
  GPIO_InitStruct.Pin = PUL_1_Pin|PUL_2_Pin|PUL_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PD8 PD9 PD10 OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|OTG_FS_OverCurrent_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Bump_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Bump_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
/* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
Đang hiển thị 5321365177605409005.
